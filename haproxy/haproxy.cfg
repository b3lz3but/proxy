global
    log stdout format raw local0
    maxconn 10000
    tune.ssl.default-dh-param 2048

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  redispatch
    retries 3
    timeout connect 3000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout queue 1m
    timeout tarpit 60s
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend section for incoming HTTP connections
frontend http-in
    # Bind to port 8000 on all network interfaces
    bind *:8000
    # Set the mode to HTTP
    mode http
    stick-table type ip size 1m expire 10m store gpc0,conn_rate(60s)
    option forwardfor
    # Use the backend_servers section for backend processing
    default_backend backend_servers
    # Rate limiting configuration
    stick-table type ip size 1m expire 10m store gpc0
    acl abuse src_get_gpc0 gt 0
    tcp-request connection track-sc0 src
    tcp-request connection reject if abuse
    # Enable compression
    compression algo gzip
    compression type text/html text/plain text/css application/javascript application/json

# Backend section for defining backend servers
backend backend_servers
    # Set the mode to HTTP
    mode http
    # Use round-robin load balancing algorithm
    balance roundrobin
    option httpchk GET /health
    # Expect HTTP status 200 for a healthy server
    http-check expect status 200
    # Define backend servers with health check parameters
    server proxy1 squid:3128 check inter 2000 rise 2 fall 3
    server proxy2 tinyproxy:8888 check inter 2000 rise 2 fall 3

# Uncomment the following lines to enable SSL termination
#frontend https-in
#    bind *:443 ssl crt /etc/haproxy/certs/your_cert.pem
#    mode http
#    option forwardfor
#    default_backend backend_servers